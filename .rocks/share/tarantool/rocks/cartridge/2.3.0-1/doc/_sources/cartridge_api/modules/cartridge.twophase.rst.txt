.. _cartridge.twophase:

===============================================================================
Module *cartridge.twophase*
===============================================================================

Clusterwide configuration propagation two-phase algorithm.



(**Added** in v1.2.0-19)


-------------------------------------------------------------------------------
Functions
-------------------------------------------------------------------------------


.. _cartridge.twophase.patch_clusterwide:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
patch_clusterwide (patch)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Edit the clusterwide configuration. 
Top-level keys are merged with the current configuration.
To remove a top-level section, use
``patch_clusterwide{key = box.NULL}`` .

The function uses a two-phase commit algorithm with the following steps:

I. Patches the current configuration.

II. Validates topology on the current server.

III. Executes the preparation phase ( ``prepare_2pc`` ) on every server
excluding expelled and disabled servers.

IV. If any server reports an error, executes the abort phase ( ``abort_2pc`` ).
All servers prepared so far are rolled back and unlocked.

V. Performs the commit phase ( ``commit_2pc`` ).
In case the phase fails, an automatic rollback is impossible, the
cluster should be repaired manually.



**Parameters:**

- *patch:* (`table <https://www.lua.org/manual/5.1/manual.html#5.5>`_)   

**Returns**:

(**boolean**) true


**Or**

(**nil**) 

(`table <https://www.lua.org/manual/5.1/manual.html#5.5>`_) Error description


.. _cartridge.twophase.get_schema:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
get_schema ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Get clusterwide DDL schema. 

(**Added** in v1.2.0-28)



**Returns**:

(`string <https://www.lua.org/manual/5.1/manual.html#5.4>`_) Schema in YAML format


**Or**

(**nil**) 

(`table <https://www.lua.org/manual/5.1/manual.html#5.5>`_) Error description


.. _cartridge.twophase.set_schema:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set_schema (schema)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Apply clusterwide DDL schema. 

(**Added** in v1.2.0-28)


**Parameters:**

- *schema:* (`string <https://www.lua.org/manual/5.1/manual.html#5.4>`_) in YAML format  

**Returns**:

(`string <https://www.lua.org/manual/5.1/manual.html#5.4>`_) The same new schema


**Or**

(**nil**) 

(`table <https://www.lua.org/manual/5.1/manual.html#5.5>`_) Error description


.. _cartridge.twophase.on_patch:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
on_patch (trigger_new, trigger_old)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Set up trigger for for patch_clusterwide. 

It will be executed **before** new new config applied.

If the parameters are  ``(nil, old_trigger)`` , then the old trigger is
deleted.

The trigger function is called with two argument:
-  ``conf_new``  ( ``ClusterwideConfig`` )
-  ``conf_old``  ( ``ClusterWideConfig`` )

It is allowed to modify  ``conf_new`` , but not  ``conf_old`` .
Return values are ignored. If calling a trigger raises an error,
``patch_clusterwide``  returns it as  ``nil, err`` .

(**Added** in v2.1.0-4)



**Parameters:**

- *trigger_new:* (**function**)   
- *trigger_old:* (**function**)   


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Usage:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: lua

    local function inject_data(conf_new, _)
        local data_yml = yaml.encode({foo = 'bar'})
        conf_new:set_plaintext('data.yml', data_yml)
    end)
    
    twophase.on_patch(inject_data) -- set custom patch modifier trigger
    twophase.on_patch(nil, inject_data) -- drop trigger
    

-------------------------------------------------------------------------------
Local Functions
-------------------------------------------------------------------------------


.. _cartridge.twophase.prepare_2pc:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
prepare_2pc (data)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Two-phase commit - preparation stage. 

Validate the configuration and acquire a lock setting local variable
and writing "config.prepare.yml" file. If the validation fails, the
lock isn't acquired and doesn't have to be aborted.



**Parameters:**

- *data:* (`table <https://www.lua.org/manual/5.1/manual.html#5.5>`_) clusterwide config content  

**Returns**:

(**boolean**) true


**Or**

(**nil**) 

(`table <https://www.lua.org/manual/5.1/manual.html#5.5>`_) Error description


.. _cartridge.twophase.commit_2pc:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
commit_2pc ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Two-phase commit - commit stage. 

Back up the active configuration, commit changes to filesystem by
renaming prepared file, release the lock, and configure roles.
If any errors occur, configuration is not rolled back automatically.
Any problem encountered during this call has to be solved manually.




**Returns**:

(**boolean**) true


**Or**

(**nil**) 

(`table <https://www.lua.org/manual/5.1/manual.html#5.5>`_) Error description


.. _cartridge.twophase.abort_2pc:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
abort_2pc ()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Two-phase commit - abort stage. 

Release the lock for further commit attempts.



**Returns**:

(**boolean**) true


